#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
proton_cdk_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk - Proton Helper CLI\n"
    echo

  else
    printf "proton-cdk - Proton Helper CLI\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk COMMAND\n"
  printf "  proton-cdk [COMMAND] --help | -h\n"
  printf "  proton-cdk --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   create service template\n" "service    "
  printf "  %s   create environment template\n" "environment"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
proton_cdk_service_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk service - create service template\n"
    echo

  else
    printf "proton-cdk service - create service template\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk service COMMAND\n"
  printf "  proton-cdk service [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   make directory structure and templates.\n" "init  "
  printf "  %s   make bundle.\n" "bundle"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
proton_cdk_service_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk service init\n"
    echo

    printf "  make directory structure and templates.\n  1) Not specified --major\n  \$name/instance_infrastructure\n  \n  2) Specified --major 1\n  \$name/v1/instance_infrastructure\n"
    echo

  else
    printf "proton-cdk service init - make directory structure and templates.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk service init [NAME] [OPTIONS]\n"
  printf "  proton-cdk service init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--target, -t TARGET (required)"
    printf "    target_name:version\n"
    echo

    # :flag.usage
    printf "  %s\n" "--major, -m MAJOR_VERSION"
    printf "    major-version of service template.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "\n"
    echo

  fi
}

# :command.usage
proton_cdk_service_bundle_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk service bundle - make bundle.\n"
    echo

  else
    printf "proton-cdk service bundle - make bundle.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk service bundle\n"
  printf "  proton-cdk service bundle --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
proton_cdk_environment_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk environment - create environment template\n"
    echo

  else
    printf "proton-cdk environment - create environment template\n"
    echo

  fi

  printf "Alias: env\n"
  echo

  printf "%s\n" "Usage:"
  printf "  proton-cdk environment COMMAND\n"
  printf "  proton-cdk environment [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   make directory structure and templates.\n" "init  "
  printf "  %s   make bundle\n" "bundle"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
proton_cdk_environment_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk environment init\n"
    echo

    printf "  make directory structure and templates.\n  1) Not specified --major\n  \$name/infrastructure\n  \n  2) Specified --major 1\n  \$name/v1/infrastructure\n"
    echo

  else
    printf "proton-cdk environment init - make directory structure and templates.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk environment init [NAME] [OPTIONS]\n"
  printf "  proton-cdk environment init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--major, -m MAJOR_VERSION"
    printf "\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "\n"
    echo

  fi
}

# :command.usage
proton_cdk_environment_bundle_usage() {
  if [[ -n $long_usage ]]; then
    printf "proton-cdk environment bundle - make bundle\n"
    echo

  else
    printf "proton-cdk environment bundle - make bundle\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  proton-cdk environment bundle\n"
  printf "  proton-cdk environment bundle --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/bundle_functions.sh
bundle_filename_from_package_json () {
    local pkg="$1"
    jq -r '"\(.name)-\(.version).tar.gz"' "$pkg"
}

# src/lib/customize_generated_files.sh
customize_environment_tsconfig_json() {
  jq '.compilerOptions.resolveJsonModule=true | .compilerOptions.esModuleInterop=true' tsconfig.json > tmp3.json
  mv -f tmp3.json tsconfig.json
}

customize_environment_package_json() {
  local major=${1:-1}
  jq --arg major "$major" '.version="\($major).0.0"' package.json > tmp1.json
  mv -f tmp1.json package.json
}

customize_environment_cdk_json() {
  jq '.outputsFile="cdk-outputs.json" | .requireApproval="never"' cdk.json > tmp2.json
  mv -f tmp2.json cdk.json
}

customize_service_tsconfig_json() {
  jq '.compilerOptions.resolveJsonModule=true | .compilerOptions.esModuleInterop=true' tsconfig.json > tmp3.json
  mv -f tmp3.json tsconfig.json
}

customize_service_package_json() {
  local major=${1:-1}
  jq --arg major "$major" '.version="\($major).0.0"' package.json > tmp1.json
  mv -f tmp1.json package.json
}

customize_service_cdk_json() {
  jq '.outputsFile="cdk-outputs.json" | .requireApproval="never"' cdk.json > tmp2.json
  mv -f tmp2.json cdk.json
}

# src/lib/proton_templates.sh
create_cdk_to_proton_sh () {
  cat << BASH > cdk-to-proton.sh
#!/bin/bash
# cdk-outputs.json : { "stackName1" : { "outputName1" : "outputValue1" , "outputName2" : "outputValue2" }}
# proton-outputs.json : [ {"key": "outputName1" , "valueString" : "outputValue1" }, {"key": "outputName2" , "valueString" : "outputValue2" }]

jq 'to_entries | map_values(.value) | add | to_entries | map({key:.key, valueString:.value})'

BASH
  chmod 755 cdk-to-proton.sh
}

create_template_registration () {
  local target="$1"
  cat << YAML > .template-registration
compatible_environments:
  - $target
YAML
}

create_environment_schema () {
  cat << YAML > schema.yaml
schema:
  format:
    openapi: "3.0.0"
  environment_input_type: "EnvironmentInputs"
  types:
    EnvironmentInputs:
      type: object
      description: "Input properties for my environment"
      properties:
        vpc_cidr_block:
          type: string
          title: "VPC CIDR block"
          description: "VPC CIDR block, or default if left blank"
          default: "10.0.0.0/16"
      required:
        - vpc_cidr_block
YAML
}

create_service_schema () {
  cat << YAML > schema.yaml
schema:
  format:
    openapi: "3.0.0"
  environment_input_type: "EnvironmentInputs"
  types:
    EnvironmentInputs:
      type: object
      description: "Input properties for my environment"
      properties:
        vpc_cidr_block:
          type: string
          title: "VPC CIDR block"
          description: "VPC CIDR block, or default if left blank"
          default: "10.0.0.0/16"
      required:
        - vpc_cidr_block
YAML
}

create_environment_manifest_yaml() {
cat << YAML > manifest.yaml
infrastructure:
  templates:
    - rendering_engine: codebuild
      settings:
        image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        runtimes:
          nodejs: 18
        provision:
          # Run when create/update is triggered for environment or service
          # Install dependencies
          - npm install
          - npm run cdk -- deploy
          # Script to convert CDK outputs into outputs for Proton
          - chmod +x ./cdk-to-proton.sh
          - cat cdk-outputs.json | ./cdk-to-proton.sh > proton-outputs.json
          # Notify AWS Proton of deployment status
          - aws proton notify-resource-deployment-status-change --resource-arn $RESOURCE_ARN --outputs file://./proton-outputs.json
        deprovision:
          # Install dependencies and destroy resources
          - npm install
          - npm run cdk -- destroy --force
YAML
}

create_service_manifest_yaml() {
cat << YAML > manifest.yaml
infrastructure:
  templates:
    - rendering_engine: codebuild
      settings:
        image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        runtimes:
          nodejs: 18
        provision:
          # Run when create/update is triggered for environment or service
          # Install dependencies
          - npm install
          - npm run cdk -- deploy
          # Script to convert CDK outputs into outputs for Proton
          - chmod +x ./cdk-to-proton.sh
          - cat cdk-outputs.json | ./cdk-to-proton.sh > proton-outputs.json
          # Notify AWS Proton of deployment status
          - aws proton notify-resource-deployment-status-change --resource-arn $RESOURCE_ARN --outputs file://./proton-outputs.json
        deprovision:
          # Install dependencies and destroy resources
          - npm install
          - npm run cdk -- destroy --force
YAML
}

# :command.command_functions

# :command.function
proton_cdk_service_init_command() {
  # src/service_init_command.sh
  local name="${args[name]}"
  local major="${args[--major]}"
  local target="${args[--target]}"

  local tmpdir="$(mktemp -d)"
  mkdir -p "$tmpdir/$name"

  pushd "$tmpdir/$name" >/dev/null
    npx cdk init app --language=typescript --generate-only
    create_template_registration "$target"
    create_service_manifest_yaml
    create_cdk_to_proton_sh
    customize_service_package_json "$major"
    customize_service_cdk_json
    customize_service_tsconfig_json
  popd >/dev/null

  if [ -z "$major" ]; then
    mkdir -p "$name/schema"
    pushd "$name/schema" >/dev/null
      create_service_schema
    popd >/dev/null
    mv "$tmpdir/$name" "$name/instance_infrastructure"
  else
    mkdir -p "$name/v$major/schema"
    pushd "$name/v$major/schema" >/dev/null
      create_service_schema
    popd >/dev/null
    mv "$tmpdir/$name" "$name/v$major/instance_infrastructure"
  fi

  rmdir $tmpdir

}

# :command.function
proton_cdk_service_bundle_command() {
  # src/service_bundle_command.sh
  if [ ! -f "instance_infrastructure/package.json" ]; then
    echo "instance_infrastructure/package.json is not exists."
    return 1
  fi
  local output="$(bundle_filename_from_package_json 'instance_infrastructure/package.json')"
  find . -mindepth 1 -type f | sed 's/^\.\///' | grep -v node_modules | xargs tar zcf $output

}

# :command.function
proton_cdk_environment_init_command() {
  # src/environment_init_command.sh
  local name="${args[name]}"
  local major="${args[--major]}"

  local tmpdir="$(mktemp -d)"
  mkdir -p "$tmpdir/$name"

  pushd "$tmpdir/$name" >/dev/null
    npx cdk init app --language=typescript --generate-only
    create_environment_manifest_yaml
    create_cdk_to_proton_sh
    customize_environment_package_json "$major"
    customize_environment_cdk_json
    customize_environment_tsconfig_json
  popd >/dev/null

  if [ -z "$major" ]; then
    mkdir -p "$name/schema"
    pushd "$name/schema" >/dev/null
      create_environment_schema
    popd >/dev/null
    mv "$tmpdir/$name" "$name/infrastructure"
  else
    mkdir -p "$name/v$major/schema"
    pushd "$name/v$major/schema" >/dev/null
      create_environment_schema
    popd >/dev/null
    mv "$tmpdir/$name" "$name/v$major/infrastructure"
  fi

  rmdir $tmpdir

}

# :command.function
proton_cdk_environment_bundle_command() {
  # src/environment_bundle_command.sh
  local major="${args[--major]}"
  if [ ! -f "infrastructure/package.json" ]; then
    echo "infrastructure/package.json is not exists."
    return 1
  fi
  local output="$(bundle_filename_from_package_json 'infrastructure/package.json')"
  find . -mindepth 1 -type f | sed 's/^\.\///' | grep -v node_modules | xargs tar zcf $output

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        proton_cdk_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    service)
      action="service"
      shift
      proton_cdk_service_parse_requirements "$@"
      shift $#
      ;;

    environment | env)
      action="environment"
      shift
      proton_cdk_environment_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      proton_cdk_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
proton_cdk_service_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_service_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      proton_cdk_service_init_parse_requirements "$@"
      shift $#
      ;;

    bundle)
      action="bundle"
      shift
      proton_cdk_service_bundle_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      proton_cdk_service_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
proton_cdk_service_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_service_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="service init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --target | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--target']="$2"
          shift
          shift
        else
          printf "%s\n" "--target requires an argument: --target, -t TARGET" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --major | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--major']="$2"
          shift
          shift
        else
          printf "%s\n" "--major requires an argument: --major, -m MAJOR_VERSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--target']+x} ]]; then
    printf "missing required flag: --target, -t TARGET\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
proton_cdk_service_bundle_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_service_bundle_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="service bundle"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
proton_cdk_environment_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_environment_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      proton_cdk_environment_init_parse_requirements "$@"
      shift $#
      ;;

    bundle)
      action="bundle"
      shift
      proton_cdk_environment_bundle_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      proton_cdk_environment_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
proton_cdk_environment_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_environment_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="environment init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --major | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--major']="$2"
          shift
          shift
        else
          printf "%s\n" "--major requires an argument: --major, -m MAJOR_VERSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
proton_cdk_environment_bundle_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        proton_cdk_environment_bundle_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="environment bundle"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  # nvm use stable
}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "service") proton_cdk_service_command ;;
    "service init") proton_cdk_service_init_command ;;
    "service bundle") proton_cdk_service_bundle_command ;;
    "environment") proton_cdk_environment_command ;;
    "environment init") proton_cdk_environment_init_command ;;
    "environment bundle") proton_cdk_environment_bundle_command ;;
  esac
}

initialize
run "$@"
